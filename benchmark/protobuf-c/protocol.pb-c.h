/* Generated by the protocol buffer compiler.  DO NOT EDIT! */
/* Generated from: protocol.proto */

#ifndef PROTOBUF_C_protocol_2eproto__INCLUDED
#define PROTOBUF_C_protocol_2eproto__INCLUDED

#include <protobuf-c/protobuf-c.h>

PROTOBUF_C__BEGIN_DECLS

#if PROTOBUF_C_VERSION_NUMBER < 1003000
# error This file was generated by a newer version of protoc-c which is incompatible with your libprotobuf-c headers. Please update your headers.
#elif 1004000 < PROTOBUF_C_MIN_COMPILER_VERSION
# error This file was generated by an older version of protoc-c which is incompatible with your libprotobuf-c headers. Please regenerate this file with a newer version of protoc-c.
#endif


typedef struct State State;
typedef struct Config Config;
typedef struct Target Target;


/* --- enums --- */

typedef enum _MessageType {
  MESSAGE_TYPE__RESET = 0,
  MESSAGE_TYPE__TARGETSTATE = 1,
  MESSAGE_TYPE__KEEPALIVE = 2,
  MESSAGE_TYPE__UPDATESTATE = 3
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(MESSAGE_TYPE)
} MessageType;
typedef enum _Error {
  /*
   *INT 0
   */
  ERROR__NO_ERROR = 0,
  /*
   * INT 1
   */
  ERROR__NEED_RESET = 1,
  /*
   * INT 2
   */
  ERROR__X_OVERFLOW = 2,
  /*
   * INT 4
   */
  ERROR__V_OVERFLOW = 4,
  /*
   * INT 8
   */
  ERROR__A_OVERFLOW = 8,
  /*
   * INT 16 
   */
  ERROR__MOTOR_STALLED = 16,
  /*
   * INT 32
   */
  ERROR__ENDSTOP_HIT = 32
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(ERROR)
} Error;

/* --- messages --- */

struct  State
{
  ProtobufCMessage base;
  /*
   * 32 bitmask-based error code
   */
  int32_t error_code;
  /*
   * current cart position [m] 
   */
  float curr_cart_x;
  /*
   * current cart velocity [m/s] 
   */
  float curr_cart_v;
  /*
   * current cart acceleration [m/s^2]
   */
  float curr_cart_a;
  /*
   * current pole angle [rad]
   */
  float curr_pole_x;
  /*
   * current pole angular velocity [rad/s]
   */
  float curr_pole_v;
  /*
   * current IMU measured cart acceleration [m/s^2]
   */
  float curr_imu_a;
};
#define STATE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&state__descriptor) \
    , 0, 0, 0, 0, 0, 0, 0 }


struct  Config
{
  ProtobufCMessage base;
  /*
   * absolute max cart position [m]
   */
  float max_cart_x;
  /*
   * absolute max cart velocity [m/s]
   */
  float max_cart_v;
  /*
   * absolute max cart acceleration [m/s^2]
   */
  float max_cart_a;
  /*
   * max calibration-determined cart position [m] 
   */
  float hw_max_x;
  /*
   * max calibration-determined cart speed [m/s]
   */
  float hw_max_v;
  /*
   * max calibration-determined cart acceleration [m/s^2]
   */
  float hw_max_a;
};
#define CONFIG__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&config__descriptor) \
    , 0, 0, 0, 0, 0, 0 }


struct  Target
{
  ProtobufCMessage base;
  /*
   * target cart position [m]
   */
  float target_cart_x;
  /*
   * target cart velocity [m/s]
   */
  float target_cart_v;
  /*
   * target cart acceleration [m/s^2]
   */
  float target_cart_a;
};
#define TARGET__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&target__descriptor) \
    , 0, 0, 0 }


/* State methods */
void   state__init
                     (State         *message);
size_t state__get_packed_size
                     (const State   *message);
size_t state__pack
                     (const State   *message,
                      uint8_t             *out);
size_t state__pack_to_buffer
                     (const State   *message,
                      ProtobufCBuffer     *buffer);
State *
       state__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   state__free_unpacked
                     (State *message,
                      ProtobufCAllocator *allocator);
/* Config methods */
void   config__init
                     (Config         *message);
size_t config__get_packed_size
                     (const Config   *message);
size_t config__pack
                     (const Config   *message,
                      uint8_t             *out);
size_t config__pack_to_buffer
                     (const Config   *message,
                      ProtobufCBuffer     *buffer);
Config *
       config__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   config__free_unpacked
                     (Config *message,
                      ProtobufCAllocator *allocator);
/* Target methods */
void   target__init
                     (Target         *message);
size_t target__get_packed_size
                     (const Target   *message);
size_t target__pack
                     (const Target   *message,
                      uint8_t             *out);
size_t target__pack_to_buffer
                     (const Target   *message,
                      ProtobufCBuffer     *buffer);
Target *
       target__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   target__free_unpacked
                     (Target *message,
                      ProtobufCAllocator *allocator);
/* --- per-message closures --- */

typedef void (*State_Closure)
                 (const State *message,
                  void *closure_data);
typedef void (*Config_Closure)
                 (const Config *message,
                  void *closure_data);
typedef void (*Target_Closure)
                 (const Target *message,
                  void *closure_data);

/* --- services --- */


/* --- descriptors --- */

extern const ProtobufCEnumDescriptor    message_type__descriptor;
extern const ProtobufCEnumDescriptor    error__descriptor;
extern const ProtobufCMessageDescriptor state__descriptor;
extern const ProtobufCMessageDescriptor config__descriptor;
extern const ProtobufCMessageDescriptor target__descriptor;

PROTOBUF_C__END_DECLS


#endif  /* PROTOBUF_C_protocol_2eproto__INCLUDED */
